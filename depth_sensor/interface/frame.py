import enum
from typing import Protocol

import numpy.typing as npt

from depth_sensor.interface.stream_profile import StreamProfile

class StreamFormat(enum.Enum):
    RGB = 0
    BGR = 1
    Z16 = 2
    Y8 = 3
    UNKNOWN = 4

class ColorFrame(Protocol):
    def get_data(self) -> npt.ArrayLike:
        ...
    def get_format(self) -> StreamFormat:
        ...
    def set_format(self, format: StreamFormat) -> None:
        ...
    def get_profile(self) -> StreamProfile:
        ...
    def get_width(self) -> int:
        ...
    def get_height(self) -> int:
        ...

class DepthFrame(Protocol):
    def get_data(self) -> npt.ArrayLike:
        ...
    def get_depth_scale(self) -> float:
        ...
    def get_distance(self, x: int, y: int) -> float:
        ...
    def get_profile(self) -> StreamProfile:
        ...
    def get_width(self) -> int:
        ...
    def get_height(self) -> int:
        ...

class InfraredFrame(Protocol):
    def get_data(self) -> npt.ArrayLike:
        ...
    def get_profile(self) -> StreamProfile:
        ...

class CompositeFrame(Protocol):
    def get_color_frame(self) -> ColorFrame:
        ...
    def get_depth_frame(self) -> DepthFrame:
        ...
    def get_infrared_frame(self, index: int = 0) -> InfraredFrame:
        ...
